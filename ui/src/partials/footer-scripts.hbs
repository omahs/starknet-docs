<script src="{{{uiRootPath}}}/js/site.js"></script>
<script async src="{{{uiRootPath}}}/js/vendor/highlight.js"></script>
<script async src="{{{uiRootPath}}}/js/vendor/tabs-block-behaviour.js"></script>
<script async src="{{{uiRootPath}}}/js/vendor/swagger-ui.js"></script>
<script async src="{{{uiRootPath}}}/js/vendor/component-versions.js"></script>
<script src="{{uiRootPath}}/js/vendor/custom.js"></script>

<script>
    const { algoliasearch } = window;
    const { autocomplete, getAlgoliaResults, getAlgoliaFacets} = window["@algolia/autocomplete-js"]
    {{!-- const { createQuerySuggestionsPlugin } = window['@algolia/autocomplete-plugin-query-suggestions']; --}}


    const appId = "VHYJO45TI4";
    const apiKey = "9d5f273e78238a8c505526e481c857f7";
    const searchClient = algoliasearch(appId, apiKey);

    function getSources({ query, state }) {
        if (!query) {
          return [];
        }

        return [
          {
            sourceId: "docs",
            getItems() {
              return getAlgoliaResults({
                searchClient,
                queries: [
                  {
                    indexName: "starknet-docs-dev",
                    query,
                    params: {
                      attributesToSnippet: ["title:10", "content:10"],
                      snippetEllipsisText: "â€¦",
                      {{!-- attributesToRetrieve: [
                        'name',
                      ] --}}
                    }
                  }
                ]
              });
            },
            templates: {
              header({html}) {
                return (
                  html`<span class="aa-SourceHeaderTitle">Documentation</span>`
                );
              },
              item({ item: hit, components, html, ...rest }) {
                return (html`
                    <a href=${hit.url} target="_blank" class="aa-ItemLink">
                      <div class="aa-ItemContent">
                        <div class="hit-title">
                          ${components.Highlight({ attribute: 'title', hit })}
                        </div>
                        <div class="hit-desc">
                          ${components.Highlight({ attribute: 'content', hit })}
                        </div>
                      </div>
                    </a>
                  `)
              },
              noResults() {
                return "No docs for this query.";
              }
            }
          }
        ];
    };

    autocomplete({
      container: "#autocomplete",
      placeholder: "Search",
      openOnFocus: true,
      detachedMediaQuery: "",
      getSources
    });

</script>

{{!-- --aa-detached-modal-media-query is not working as expected. So we have to toggle modal classname manually --}}
<script> 
  const modalBreakpoint = 680;
  const modalClassname = 'aa-DetachedContainer--modal'

  function toggleAlgoliaModal(){
      const algoliaDetachedContainer = document.querySelector('.aa-DetachedContainer')
      if(!algoliaDetachedContainer){
        return
      }
      const documentWidth = document.documentElement.clientWidth;
      if(documentWidth >= modalBreakpoint){
        algoliaDetachedContainer.classList.add(modalClassname)
      }else {
        algoliaDetachedContainer.classList.remove(modalClassname)
      }
  }
    
  // Attaching the event listener function to window's resize event
  window.addEventListener("resize", toggleAlgoliaModal);

  // Calling the function for the first time
  toggleAlgoliaModal();

</script>